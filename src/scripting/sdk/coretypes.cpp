#include <scripting/core.h>
#include <sdk/game.h>

#include <types/PluginState.h>
#include <types/EventResult.h>
#include <types/LogType.h>
#include <types/GamePhase.h>

LoadScriptingComponent(coretypes, [](PluginObject plugin, EContext* ctx) -> void {
    ADD_VARIABLES("PluginState_t", {
        { "Started", ENGINE_VALUE((uint64_t)PluginState_t::Started) },
        { "Stopped", ENGINE_VALUE((uint64_t)PluginState_t::Stopped) },
    });

    ADD_VARIABLES("RoundEndReason_t", {
        { "Unknown", ENGINE_VALUE((uint64_t)0) },
        { "TargetBombed", ENGINE_VALUE((uint64_t)0x1) },
        { "TerroristsEscaped", ENGINE_VALUE((uint64_t)0x4) },
        { "CTsPreventEscape", ENGINE_VALUE((uint64_t)0x5) },
        { "EscapingTerroristsNeutralized", ENGINE_VALUE((uint64_t)0x6) },
        { "BombDefused", ENGINE_VALUE((uint64_t)0x7) },
        { "CTsWin", ENGINE_VALUE((uint64_t)0x8) },
        { "TerroristsWin", ENGINE_VALUE((uint64_t)0x9) },
        { "RoundDraw", ENGINE_VALUE((uint64_t)0xA) },
        { "AllHostageRescued", ENGINE_VALUE((uint64_t)0xB) },
        { "TargetSaved", ENGINE_VALUE((uint64_t)0xC) },
        { "HostagesNotRescued", ENGINE_VALUE((uint64_t)0xD) },
        { "TerroristsNotEscaped", ENGINE_VALUE((uint64_t)0xE) },
        { "GameCommencing", ENGINE_VALUE((uint64_t)0x10) },
        { "TerroristsSurrender", ENGINE_VALUE((uint64_t)0x11) },
        { "CTsSurrender", ENGINE_VALUE((uint64_t)0x12) },
        { "TerroristsPlanted", ENGINE_VALUE((uint64_t)0x13) },
        { "CTsReachedHostage", ENGINE_VALUE((uint64_t)0x14) },
        { "SurvivalWin", ENGINE_VALUE((uint64_t)0x15) },
        { "SurvivalDraw", ENGINE_VALUE((uint64_t)0x16) },
    });

    ADD_VARIABLES("Team", {
        { "None", ENGINE_VALUE(CS_TEAM_NONE) },
        { "Spectator", ENGINE_VALUE(CS_TEAM_SPECTATOR) },
        { "T", ENGINE_VALUE(CS_TEAM_T) },
        { "CT", ENGINE_VALUE(CS_TEAM_CT) },
    });

    ADD_VARIABLES("EventResult", {
        { "Continue", ENGINE_VALUE((uint64_t)EventResult::Continue) },
        { "Stop", ENGINE_VALUE((uint64_t)EventResult::Stop) },
        { "Handled", ENGINE_VALUE((uint64_t)EventResult::Handled) },
    });

    ADD_VARIABLES("MessageType", {
        { "Notify", ENGINE_VALUE(HUD_PRINTNOTIFY) },
        { "Console", ENGINE_VALUE(HUD_PRINTCONSOLE) },
        { "Chat", ENGINE_VALUE(HUD_PRINTTALK) },
        { "Center", ENGINE_VALUE(HUD_PRINTCENTER) },
    });

    ADD_VARIABLES("DisconnectReason", {
        { "Invalid", ENGINE_VALUE((uint64_t)0) },
        { "Shutdown", ENGINE_VALUE((uint64_t)1) },
        { "DisconnectByUser", ENGINE_VALUE((uint64_t)2) },
        { "DisconnectByServer", ENGINE_VALUE((uint64_t)3) },
        { "Lost", ENGINE_VALUE((uint64_t)4) },
        { "Overflow", ENGINE_VALUE((uint64_t)5) },
        { "SteamBanned", ENGINE_VALUE((uint64_t)6) },
        { "SteamInUse", ENGINE_VALUE((uint64_t)7) },
        { "SteamTicket", ENGINE_VALUE((uint64_t)8) },
        { "SteamLogon", ENGINE_VALUE((uint64_t)9) },
        { "SteamAuthCancelled", ENGINE_VALUE((uint64_t)10) },
        { "SteamAuthAlreadyUsed", ENGINE_VALUE((uint64_t)11) },
        { "SteamAuthInvalid", ENGINE_VALUE((uint64_t)12) },
        { "SteamVacBanned", ENGINE_VALUE((uint64_t)13) },
        { "SteamLoggedInElsewhere", ENGINE_VALUE((uint64_t)14) },
        { "SteamVacCheckTimedout", ENGINE_VALUE((uint64_t)15) },
        { "SteamDropped", ENGINE_VALUE((uint64_t)16) },
        { "SteamOwnership", ENGINE_VALUE((uint64_t)17) },
        { "ServerInfoOverflow", ENGINE_VALUE((uint64_t)18) },
        { "TickMsgOverflow", ENGINE_VALUE((uint64_t)19) },
        { "StringTableMsgOverflow", ENGINE_VALUE((uint64_t)20) },
        { "DeltaentMsgOverflow", ENGINE_VALUE((uint64_t)21) },
        { "TempentMsgOverflow", ENGINE_VALUE((uint64_t)22) },
        { "SoundsMsgOverflow", ENGINE_VALUE((uint64_t)23) },
        { "SnapshotOverflow", ENGINE_VALUE((uint64_t)24) },
        { "SnapshotError", ENGINE_VALUE((uint64_t)25) },
        { "ReliableOverflow", ENGINE_VALUE((uint64_t)26) },
        { "BadDeltaTick", ENGINE_VALUE((uint64_t)27) },
        { "NoMoreSplits", ENGINE_VALUE((uint64_t)28) },
        { "Timedout", ENGINE_VALUE((uint64_t)29) },
        { "Disconnected", ENGINE_VALUE((uint64_t)30) },
        { "LeavingSplit", ENGINE_VALUE((uint64_t)31) },
        { "DifferentClassTables", ENGINE_VALUE((uint64_t)32) },
        { "BadRelayPassword", ENGINE_VALUE((uint64_t)33) },
        { "BadSpectatorPassword", ENGINE_VALUE((uint64_t)34) },
        { "HLTVRestricted", ENGINE_VALUE((uint64_t)35) },
        { "NoSpectators", ENGINE_VALUE((uint64_t)36) },
        { "HLTVUnavailable", ENGINE_VALUE((uint64_t)37) },
        { "HLTVStop", ENGINE_VALUE((uint64_t)38) },
        { "Kicked", ENGINE_VALUE((uint64_t)39) },
        { "BanAdded", ENGINE_VALUE((uint64_t)40) },
        { "KickBanAdded", ENGINE_VALUE((uint64_t)41) },
        { "HLTVDirect", ENGINE_VALUE((uint64_t)42) },
        { "PureServerClientExtra", ENGINE_VALUE((uint64_t)43) },
        { "PureServerMismatch", ENGINE_VALUE((uint64_t)44) },
        { "UserCmd", ENGINE_VALUE((uint64_t)45) },
        { "RejectedByGame", ENGINE_VALUE((uint64_t)46) },
        { "MessageParseError", ENGINE_VALUE((uint64_t)47) },
        { "InvalidMessageError", ENGINE_VALUE((uint64_t)48) },
        { "BadServerPassword", ENGINE_VALUE((uint64_t)49) },
        { "DirectConnectReservation", ENGINE_VALUE((uint64_t)50) },
        { "ConnectionFailure", ENGINE_VALUE((uint64_t)51) },
        { "NoPeerGroupHandlers", ENGINE_VALUE((uint64_t)52) },
        { "Reconnection", ENGINE_VALUE((uint64_t)53) },
        { "LoopShutdown", ENGINE_VALUE((uint64_t)54) },
        { "LoopDeactivate", ENGINE_VALUE((uint64_t)55) },
        { "HostEndGame", ENGINE_VALUE((uint64_t)56) },
        { "LoopLevelLoadActivate", ENGINE_VALUE((uint64_t)57) },
        { "CreateServerFailed", ENGINE_VALUE((uint64_t)58) },
        { "Exiting", ENGINE_VALUE((uint64_t)59) },
        { "RequestHostStateIdle", ENGINE_VALUE((uint64_t)60) },
        { "RequestHostStateHLTVRelay", ENGINE_VALUE((uint64_t)61) },
        { "ClientConsistencyFail", ENGINE_VALUE((uint64_t)62) },
        { "UnableToCRCMap", ENGINE_VALUE((uint64_t)63) },
        { "ClientNoMap", ENGINE_VALUE((uint64_t)64) },
        { "ClientDifferentMap", ENGINE_VALUE((uint64_t)65) },
        { "ServerRequiresSteam", ENGINE_VALUE((uint64_t)66) },
        { "SteamDenyMisc", ENGINE_VALUE((uint64_t)67) },
        { "SteamDenyBadAnticheat", ENGINE_VALUE((uint64_t)68) },
        { "ServerShutdown", ENGINE_VALUE((uint64_t)69) },
        { "ReplayIncompatible", ENGINE_VALUE((uint64_t)71) },
        { "ConnectRequestTimedOut", ENGINE_VALUE((uint64_t)72) },
        { "ServerIncompatible", ENGINE_VALUE((uint64_t)73) },
        { "LocalProblemManyRelays", ENGINE_VALUE((uint64_t)74) },
        { "LocalProblemHostedServerPrimaryRelay", ENGINE_VALUE((uint64_t)75) },
        { "LocalProblemNetworkConfig", ENGINE_VALUE((uint64_t)76) },
        { "LocalProblemOther", ENGINE_VALUE((uint64_t)77) },
        { "RemoteTimeout", ENGINE_VALUE((uint64_t)79) },
        { "RemoteTimeoutConnecting", ENGINE_VALUE((uint64_t)80) },
        { "RemoteOther", ENGINE_VALUE((uint64_t)81) },
        { "RemoteBadCrypt", ENGINE_VALUE((uint64_t)82) },
        { "RemoteCertNotTrusted", ENGINE_VALUE((uint64_t)83) },
        { "Unusual", ENGINE_VALUE((uint64_t)84) },
        { "InternalError", ENGINE_VALUE((uint64_t)85) },
        { "RejectBadChallenge", ENGINE_VALUE((uint64_t)128) },
        { "RejectNoLobby", ENGINE_VALUE((uint64_t)129) },
        { "RejectBackgroundMap", ENGINE_VALUE((uint64_t)130) },
        { "RejectSinglePlayer", ENGINE_VALUE((uint64_t)131) },
        { "RejectHiddenGame", ENGINE_VALUE((uint64_t)132) },
        { "RejectLanRestrict", ENGINE_VALUE((uint64_t)133) },
        { "RejectBadPassword", ENGINE_VALUE((uint64_t)134) },
        { "RejectServerFull", ENGINE_VALUE((uint64_t)135) },
        { "RejectInvalidReservation", ENGINE_VALUE((uint64_t)136) },
        { "RejectFailedChannel", ENGINE_VALUE((uint64_t)137) },
        { "RejectConnectFromLobby", ENGINE_VALUE((uint64_t)138) },
        { "RejectReservedForLobby", ENGINE_VALUE((uint64_t)139) },
        { "RejectInvalidKeyLength", ENGINE_VALUE((uint64_t)140) },
        { "RejectOldProtocol", ENGINE_VALUE((uint64_t)141) },
        { "RejectNewProtocol", ENGINE_VALUE((uint64_t)142) },
        { "RejectInvalidConnection", ENGINE_VALUE((uint64_t)143) },
        { "RejectInvalidCertLen", ENGINE_VALUE((uint64_t)144) },
        { "RejectInvalidSteamCertLen", ENGINE_VALUE((uint64_t)145) },
        { "RejectSteam", ENGINE_VALUE((uint64_t)146) },
        { "RejectServerAuthDisabled", ENGINE_VALUE((uint64_t)147) },
        { "RejectServerCDKeyAuthInvalid", ENGINE_VALUE((uint64_t)148) },
        { "RejectBanned", ENGINE_VALUE((uint64_t)149) },
        { "KickedTeamKilling", ENGINE_VALUE((uint64_t)150) },
        { "KickedTKStart", ENGINE_VALUE((uint64_t)151) },
        { "KickedUntrustedAccount", ENGINE_VALUE((uint64_t)152) },
        { "KickedConvictedAccount", ENGINE_VALUE((uint64_t)153) },
        { "KickedCompetitiveCooldown", ENGINE_VALUE((uint64_t)154) },
        { "KickedTeamHurting", ENGINE_VALUE((uint64_t)155) },
        { "KickedHostageKilling", ENGINE_VALUE((uint64_t)156) },
        { "KickedVotedOff", ENGINE_VALUE((uint64_t)157) },
        { "KickedIdle", ENGINE_VALUE((uint64_t)158) },
        { "KickedSuicide", ENGINE_VALUE((uint64_t)159) },
        { "KickedNoSteamLogin", ENGINE_VALUE((uint64_t)160) },
        { "KickedNoSteamTicket", ENGINE_VALUE((uint64_t)161) },
        { "KickedInputAutomation", ENGINE_VALUE((uint64_t)162) },
        { "KickedVACNetAbnormalBehavior", ENGINE_VALUE((uint64_t)163) }
    });

    ADD_VARIABLES("CollisionGroup", {
        { "COLLISION_GROUP_ALWAYS", ENGINE_VALUE((uint64_t)BuiltInCollisionGroup_t::COLLISION_GROUP_ALWAYS) },
        { "COLLISION_GROUP_NONPHYSICAL", ENGINE_VALUE((uint64_t)BuiltInCollisionGroup_t::COLLISION_GROUP_NONPHYSICAL) },
        { "COLLISION_GROUP_TRIGGER", ENGINE_VALUE((uint64_t)BuiltInCollisionGroup_t::COLLISION_GROUP_TRIGGER) },
        { "COLLISION_GROUP_CONDITIONALLY_SOLID", ENGINE_VALUE((uint64_t)BuiltInCollisionGroup_t::COLLISION_GROUP_CONDITIONALLY_SOLID) },
        { "COLLISION_GROUP_FIRST_USER", ENGINE_VALUE((uint64_t)BuiltInCollisionGroup_t::COLLISION_GROUP_FIRST_USER) },
        { "COLLISION_GROUPS_MAX_ALLOWED", ENGINE_VALUE((uint64_t)BuiltInCollisionGroup_t::COLLISION_GROUPS_MAX_ALLOWED) },
        { "COLLISION_GROUP_DEFAULT", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_DEFAULT) },
        { "COLLISION_GROUP_DEBRIS", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_DEBRIS) },
        { "COLLISION_GROUP_INTERACTIVE_DEBRIS", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_INTERACTIVE_DEBRIS) },
        { "COLLISION_GROUP_INTERACTIVE", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_INTERACTIVE) },
        { "COLLISION_GROUP_PLAYER", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PLAYER) },
        { "COLLISION_GROUP_BREAKABLE_GLASS", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_BREAKABLE_GLASS) },
        { "COLLISION_GROUP_VEHICLE", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_VEHICLE) },
        { "COLLISION_GROUP_PLAYER_MOVEMENT", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PLAYER_MOVEMENT) },
        { "COLLISION_GROUP_NPC", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_NPC) },
        { "COLLISION_GROUP_IN_VEHICLE", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_IN_VEHICLE) },
        { "COLLISION_GROUP_WEAPON", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_WEAPON) },
        { "COLLISION_GROUP_VEHICLE_CLIP", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_VEHICLE_CLIP) },
        { "COLLISION_GROUP_PROJECTILE", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PROJECTILE) },
        { "COLLISION_GROUP_DOOR_BLOCKER", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_DOOR_BLOCKER) },
        { "COLLISION_GROUP_PASSABLE_DOOR", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PASSABLE_DOOR) },
        { "COLLISION_GROUP_DISSOLVING", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_DISSOLVING) },
        { "COLLISION_GROUP_PUSHAWAY", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PUSHAWAY) },
        { "COLLISION_GROUP_NPC_ACTOR", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_NPC_ACTOR) },
        { "COLLISION_GROUP_NPC_SCRIPTED", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_NPC_SCRIPTED) },
        { "COLLISION_GROUP_PZ_CLIP", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PZ_CLIP) },
        { "COLLISION_GROUP_PROPS", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::COLLISION_GROUP_PROPS) },
        { "LAST_SHARED_COLLISION_GROUP", ENGINE_VALUE((uint64_t)StandardCollisionGroups_t::LAST_SHARED_COLLISION_GROUP) }
    });

    ADD_VARIABLES("EConVarType", {
        { "EConVarType_Invalid", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Invalid) },
        { "EConVarType_Bool", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Bool) },
        { "EConVarType_Int16", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Int16) },
        { "EConVarType_UInt16", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_UInt16) },
        { "EConVarType_Int32", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Int32) },
        { "EConVarType_UInt32", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_UInt32) },
        { "EConVarType_Int64", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Int64) },
        { "EConVarType_UInt64", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_UInt64) },
        { "EConVarType_Float32", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Float32) },
        { "EConVarType_Float64", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Float64) },
        { "EConVarType_String", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_String) },
        { "EConVarType_Color", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Color) },
        { "EConVarType_Vector2", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Vector2) },
        { "EConVarType_Vector3", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Vector3) },
        { "EConVarType_Vector4", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Vector4) },
        { "EConVarType_Qangle", ENGINE_VALUE((uint64_t)EConVarType::EConVarType_Qangle) }
    });

    ADD_VARIABLES("GamePhase", {
        { "GAMEPHASE_WARMUP_ROUND", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_WARMUP_ROUND) },
        { "GAMEPHASE_PLAYING_STANDARD", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_PLAYING_STANDARD) },
        { "GAMEPHASE_PLAYING_FIRST_HALF", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_PLAYING_FIRST_HALF) },
        { "GAMEPHASE_PLAYING_SECOND_HALF", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_PLAYING_SECOND_HALF) },
        { "GAMEPHASE_HALFTIME", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_HALFTIME) },
        { "GAMEPHASE_MATCH_ENDED", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_MATCH_ENDED) },
        { "GAMEPHASE_MAX", ENGINE_VALUE((uint64_t)GamePhase::GAMEPHASE_MAX) }
    });

    ADD_VARIABLES("ConvarFlags", {
        { "FCVAR_LINKED_CONCOMMAND", ENGINE_VALUE((uint64_t)FCVAR_LINKED_CONCOMMAND) },
        { "FCVAR_DEVELOPMENTONLY", ENGINE_VALUE((uint64_t)FCVAR_DEVELOPMENTONLY) },
        { "FCVAR_GAMEDLL", ENGINE_VALUE((uint64_t)FCVAR_GAMEDLL) },
        { "FCVAR_CLIENTDLL", ENGINE_VALUE((uint64_t)FCVAR_CLIENTDLL) },
        { "FCVAR_HIDDEN", ENGINE_VALUE((uint64_t)FCVAR_HIDDEN) },
        { "FCVAR_PROTECTED", ENGINE_VALUE((uint64_t)FCVAR_PROTECTED) },
        { "FCVAR_SPONLY", ENGINE_VALUE((uint64_t)FCVAR_SPONLY) },
        { "FCVAR_ARCHIVE", ENGINE_VALUE((uint64_t)FCVAR_ARCHIVE) },
        { "FCVAR_NOTIFY", ENGINE_VALUE((uint64_t)FCVAR_NOTIFY) },
        { "FCVAR_USERINFO", ENGINE_VALUE((uint64_t)FCVAR_USERINFO) },
        { "FCVAR_REFERENCE", ENGINE_VALUE((uint64_t)FCVAR_REFERENCE) },
        { "FCVAR_UNLOGGED", ENGINE_VALUE((uint64_t)FCVAR_UNLOGGED) },
        { "FCVAR_INITIAL_SETVALUE", ENGINE_VALUE((uint64_t)FCVAR_INITIAL_SETVALUE) },
        { "FCVAR_REPLICATED", ENGINE_VALUE((uint64_t)FCVAR_REPLICATED) },
        { "FCVAR_CHEAT", ENGINE_VALUE((uint64_t)FCVAR_CHEAT) },
        { "FCVAR_PER_USER", ENGINE_VALUE((uint64_t)FCVAR_PER_USER) },
        { "FCVAR_DEMO", ENGINE_VALUE((uint64_t)FCVAR_DEMO) },
        { "FCVAR_DONTRECORD", ENGINE_VALUE((uint64_t)FCVAR_DONTRECORD) },
        { "FCVAR_PERFORMING_CALLBACKS", ENGINE_VALUE((uint64_t)FCVAR_PERFORMING_CALLBACKS) },
        { "FCVAR_RELEASE", ENGINE_VALUE((uint64_t)FCVAR_RELEASE) },
        { "FCVAR_MENUBAR_ITEM", ENGINE_VALUE((uint64_t)FCVAR_MENUBAR_ITEM) },
        { "FCVAR_COMMANDLINE_ENFORCED", ENGINE_VALUE((uint64_t)FCVAR_COMMANDLINE_ENFORCED) },
        { "FCVAR_NOT_CONNECTED", ENGINE_VALUE((uint64_t)FCVAR_NOT_CONNECTED) },
        { "FCVAR_VCONSOLE_FUZZY_MATCHING", ENGINE_VALUE((uint64_t)FCVAR_VCONSOLE_FUZZY_MATCHING) },
        { "FCVAR_SERVER_CAN_EXECUTE", ENGINE_VALUE((uint64_t)FCVAR_SERVER_CAN_EXECUTE) },
        { "FCVAR_CLIENT_CAN_EXECUTE", ENGINE_VALUE((uint64_t)FCVAR_CLIENT_CAN_EXECUTE) },
        { "FCVAR_SERVER_CANNOT_QUERY", ENGINE_VALUE((uint64_t)FCVAR_SERVER_CANNOT_QUERY) },
        { "FCVAR_VCONSOLE_SET_FOCUS", ENGINE_VALUE((uint64_t)FCVAR_VCONSOLE_SET_FOCUS) },
        { "FCVAR_CLIENTCMD_CAN_EXECUTE", ENGINE_VALUE((uint64_t)FCVAR_CLIENTCMD_CAN_EXECUTE) },
        { "FCVAR_EXECUTE_PER_TICK", ENGINE_VALUE((uint64_t)FCVAR_EXECUTE_PER_TICK) },
        { "FCVAR_DEFENSIVE", ENGINE_VALUE((uint64_t)FCVAR_DEFENSIVE) }
    });

    ADD_VARIABLES("ListenOverride", {
        { "Listen_Default", ENGINE_VALUE((uint64_t)0) },
        { "Listen_Mute", ENGINE_VALUE((uint64_t)1) },
        { "Listen_Hear", ENGINE_VALUE((uint64_t)2) }
    });

    ADD_VARIABLES("VoiceFlagValue", {
        { "Speak_Normal", ENGINE_VALUE((uint64_t)0) },
        { "Speak_Muted", ENGINE_VALUE((uint64_t)1 << 0) },
        { "Speak_All", ENGINE_VALUE((uint64_t)1 << 1) },
        { "Speak_ListenAll", ENGINE_VALUE((uint64_t)1 << 2) },
        { "Speak_Team", ENGINE_VALUE((uint64_t)1 << 3) },
        { "Speak_ListenTeam", ENGINE_VALUE((uint64_t)1 << 4) }
    });

    ADD_VARIABLES("LogType_t", {
        { "Debug", ENGINE_VALUE((uint64_t)LogType_t::Debug) },
        { "Warning", ENGINE_VALUE((uint64_t)LogType_t::Warning) },
        { "Error", ENGINE_VALUE((uint64_t)LogType_t::Error) },
        { "Common", ENGINE_VALUE((uint64_t)LogType_t::Common) }
    });
})