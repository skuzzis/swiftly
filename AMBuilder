# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os, fnmatch

MMSPlugin.plugin_name = 'swiftly'
MMSPlugin.plugin_alias = 'swiftly'

for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  binary.sources += [
    'src/core/entrypoint.cpp',
    'src/core/configuration/setup.cpp',
    'src/core/console/console.cpp',

    'src/filesystem/files/files.cpp',

    'src/memory/encoders/json.cpp',
    
    'src/sdk/game.cpp',

    'src/server/configuration/configuration.cpp',
    
    'src/utils/utils.cpp'
  ]

  if binary.compiler.target.platform == 'linux':
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'bzip2', 'linuxsteamrt64', 'lib', 'libbz2.a'),
    ]
  else:
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'bzip2', 'win64', 'lib', 'bz2.lib'),

      "psapi.lib",
      "winmm.lib",
      "ws2_32.lib",
      "wldap32.lib",
      "advapi32.lib",
      "kernel32.lib",
      "comdlg32.lib",
      "crypt32.lib",
      "normaliz.lib",
      "wsock32.lib",
      "legacy_stdio_definitions.lib",
      "legacy_stdio_wide_specifiers.lib",
      "user32.lib",
      "gdi32.lib",
      "winspool.lib",
      "shell32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "odbc32.lib",
      "odbccp32.lib",
      "msvcrt.lib",
			os.path.join(sdk['path'], 'lib', 'public', 'win64', 'steam_api64.lib')
    ]

  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'vendor'),
    os.path.join(builder.sourcePath, 'vendor', 'bzip2', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
    
    os.path.join(builder.sourcePath, 'src'),

    os.path.join(sdk['path']),
  ]

  protobufSources = []
  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "protobufs", sdk['name'])):
    for _file in files:
      if fnmatch.fnmatch(_file, '*.proto'):
        protobufSources.append(os.path.join(root, _file).replace("\\", "/"))

  protoc_builder = builder.tools.Protoc(protoc = sdk_target.protoc, sources = protobufSources)

  protoc_builder.protoc.includes = [
		os.path.join(sdk['path'], 'thirdparty', 'protobuf-3.21.8', 'src'),
		os.path.join(builder.sourcePath, 'protobufs', sdk['name'])
	]

  binary.custom = [protoc_builder]

  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]