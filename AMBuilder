# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os, fnmatch, json

MMSPlugin.plugin_name = 'swiftly'
MMSPlugin.plugin_alias = 'swiftly'

for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "vendor", "lua-rapidjson", "src")):
    for _file in files:
      if fnmatch.fnmatch(_file, '*.cpp'):
        binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "vendor", "embedder", "src")):
	  for _file in files:
		  if fnmatch.fnmatch(_file, '*.cpp'):
			  binary.sources.append(os.path.join(root, _file).replace("\\", "/"))\

  with open(os.path.join(builder.sourcePath, "vendor", "embedder", "libs", "links.json")) as f:
	  embedder_linking = json.load(f)

  libs = embedder_linking["libraries"][binary.compiler.target.platform]
  incls = embedder_linking["includes"]
  for lib in libs:
    binary.compiler.postlink += [os.path.join(builder.sourcePath, "vendor", "embedder", "libs", lib)]
  for incl in incls:
    binary.compiler.cxxincludes += [os.path.join(builder.sourcePath, 'vendor', 'embedder', 'libs', incl)]

  binary.sources += [
    'src/core/entrypoint.cpp',
    'src/core/configuration/setup.cpp',
    'src/core/console/console.cpp',

    'src/engine/gameevents/gameevents.cpp',
    'src/engine/precacher/game_system.cpp',
    'src/engine/precacher/precacher.cpp',

    'src/entities/system.cpp',
    'src/entities/listener.cpp',

    'src/filesystem/files/files.cpp',
    'src/filesystem/logs/logger.cpp',
    'src/filesystem/logs/log.cpp',

    'src/memory/encoders/json.cpp',
    'src/memory/gamedata/gamedata.cpp',

    'src/plugins/manager.cpp',
    'src/plugins/object.cpp',

    'src/scripting/engine/events.cpp',
    'src/scripting/engine/precacher.cpp',
    'src/scripting/engine/server.cpp',

    'src/scripting/filesystem/files.cpp',
    'src/scripting/filesystem/logger.cpp',

    'src/scripting/sdk/baseclasses.cpp',
    'src/scripting/sdk/coretypes.cpp',
    'src/scripting/sdk/schema_access.cpp',
    'src/scripting/sdk/schema.cpp',
    'src/scripting/sdk/types.cpp',

    'src/scripting/core.cpp',
    'src/scripting/stack.cpp',
    
    'src/sdk/access.cpp',
    'src/sdk/schema.cpp',
    'src/sdk/game.cpp',

    'src/server/configuration/configuration.cpp',
    'src/server/translations/translation.cpp',
    'src/server/translations/translations.cpp',
    
    'src/utils/platform/platform_win.cpp',
    'src/utils/platform/platform_linux.cpp',
    'src/utils/utils.cpp',

    "vendor/dynlibutils/module.cpp",

    os.path.join(sdk['path'], 'tier1', 'keyvalues3.cpp'),
    os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'),
    os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'),
    os.path.join(sdk['path'], 'entity2', 'entitykeyvalues.cpp'),
  ]

  if binary.compiler.target.platform == 'linux':
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'bzip2', 'linuxsteamrt64', 'lib', 'libbz2.a'),

      "-lgnutls",
			"-lz",
      "-lpthread",
			"-lssl",
			"-lcrypto",
      "-lm",
      "-ldl",
      "-lreadline",
      "-lrt",
      "-lidn2",
      "-lpsl",
      "-lbrotlidec",
      "-lbacktrace",
      "-lstdc++",
			os.path.join(sdk['path'], 'lib', 'linux64', 'libsteam_api.so')
    ]
    binary.compiler.cxxflags += [
			"-Wno-invalid-offsetof",
			"-Wno-return-local-addr",
			"-Wno-overloaded-virtual",
			"-Wno-unknown-pragmas",
			"-Wno-non-virtual-dtor",
			"-Wno-attributes",
			"-Wno-array-bounds",
			"-Wno-int-to-pointer-cast",
			"-Wno-sign-compare",
			"-Wno-write-strings",
			"-Wno-class-memaccess",
			"-fexceptions",
		]
    binary.compiler.cflags += [
			"-Wno-return-local-addr",
			"-Wno-unknown-pragmas",
			"-Wno-attributes",
			"-Wno-array-bounds",
			"-Wno-int-to-pointer-cast",
			"-Wno-sign-compare",
			"-Wno-write-strings",
			"-fexceptions",
		]
    binary.compiler.defines += [
			"_LINUX",
      "LINUX",
      "POSIX",
      "GNUC",
      "COMPILER_GCC",
      "PLATFORM_64BITS",
      "META_IS_SOURCE2",
      "_GLIBCXX_USE_CXX11_ABI=0",
		]
  else:
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'bzip2', 'win64', 'lib', 'bz2.lib'),

      "psapi.lib",
      "winmm.lib",
      "ws2_32.lib",
      "wldap32.lib",
      "advapi32.lib",
      "kernel32.lib",
      "comdlg32.lib",
      "crypt32.lib",
      "normaliz.lib",
      "wsock32.lib",
      "legacy_stdio_definitions.lib",
      "legacy_stdio_wide_specifiers.lib",
      "user32.lib",
      "gdi32.lib",
      "winspool.lib",
      "shell32.lib",
      "ole32.lib",
      "oleaut32.lib",
      "uuid.lib",
      "odbc32.lib",
      "odbccp32.lib",
      "msvcrt.lib",
			os.path.join(sdk['path'], 'lib', 'public', 'win64', 'steam_api64.lib')
    ]
    binary.compiler.defines += [
			"COMPILER_MSVC",
      "COMPILER_MSVC64",
      "WIN32",
      "_WIN32",
      "WINDOWS",
      "_WINDOWS",
      "CRT_SECURE_NO_WARNINGS",
      "_CRT_SECURE_NO_WARNINGS",
      "CRT_SECURE_NO_DEPRECATE",
      "_CRT_SECURE_NO_DEPRECATE",
      "CRT_NONSTDC_NO_DEPRECATE",
      "_CRT_NONSTDC_NO_DEPRECATE",
      "_MBCS",
      "META_IS_SOURCE2",
      "X64BITS",
      "PLATFORM_64BITS",
      "NDEBUG",
      "JSON_HAS_CPP_14",
      "JSON_HAS_CPP_11"
		]
    binary.compiler.cxxflags += [
			"/Zc:__cplusplus",
			"/Ox",
			"/Zo",
			"/Oy-",
			"/Z7",
			"/TP",
			"/MT",
			"/W3",
			"/Z7",
			"/IGNORE:4101,4267,4244,4005,4003,4530",
		]

  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'vendor'),
    os.path.join(builder.sourcePath, 'vendor', 'lua-rapidjson', 'rapidjson', 'include'),
    os.path.join(builder.sourcePath, 'vendor', 'bzip2', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
    
    os.path.join(builder.sourcePath, 'src'),

    os.path.join(sdk['path']),
  ]

  protobufSources = []
  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "protobufs", sdk['name'])):
    for _file in files:
      if fnmatch.fnmatch(_file, '*.proto'):
        protobufSources.append(os.path.join(root, _file).replace("\\", "/"))

  protoc_builder = builder.tools.Protoc(protoc = sdk_target.protoc, sources = protobufSources)

  protoc_builder.protoc.includes = [
		os.path.join(sdk['path'], 'thirdparty', 'protobuf-3.21.8', 'src'),
		os.path.join(builder.sourcePath, 'protobufs', sdk['name'])
	]

  binary.custom = [protoc_builder]

  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]